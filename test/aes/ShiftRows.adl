
module ShiftRows (0) {
	input [U08][4][4] i;

	output [U08][4][4] o;
		
	net o[0][0], i[0][0];
	net o[0][1], i[1][1];
	net o[0][2], i[2][2];
	net o[0][3], i[3][3];

	net o[1][0], i[1][0];
	net o[1][1], i[2][1];
	net o[1][2], i[3][2];
	net o[1][3], i[0][3];

	net o[2][0], i[2][0];
	net o[2][1], i[3][1];
	net o[2][2], i[0][2];
	net o[2][3], i[1][3];

	net o[3][0], i[3][0];
	net o[3][1], i[0][1];
	net o[3][2], i[1][2];
	net o[3][3], i[2][3];
}

module ShiftRows_test(1){

	input [U08][4][4] i;
	output [U08][4][4] o;
%%

	$o[0][0].value = 0xd4;
	$o[0][1].value = 0x27;
	$o[0][2].value = 0x11;
	$o[0][3].value = 0xae;
	
	$o[1][0].value = 0xe0;
	$o[1][1].value = 0xbf;
	$o[1][2].value = 0x98;
	$o[1][3].value = 0xf1;

	$o[2][0].value = 0xb8;
	$o[2][1].value = 0xb4;
	$o[2][2].value = 0x5d;
	$o[2][3].value = 0xe5;
	
	$o[3][0].value = 0x1e;
	$o[3][1].value = 0x41;
	$o[3][2].value = 0x52;
	$o[3][3].value = 0x30;
	printf("get:\n");
	printf("%02x %02x %02x %02x\n", $i[0][0].value,$i[1][0].value,$i[2][0].value,$i[3][0].value);
	printf("%02x %02x %02x %02x\n", $i[0][1].value,$i[1][1].value,$i[2][1].value,$i[3][1].value);
	printf("%02x %02x %02x %02x\n", $i[0][2].value,$i[1][2].value,$i[2][2].value,$i[3][2].value);
	printf("%02x %02x %02x %02x\n", $i[0][3].value,$i[1][3].value,$i[2][3].value,$i[3][3].value);


	%%
}

module SR_top {
	contain ShiftRows s;
	contain ShiftRows_test t;

	net s.i , t.o;
	net t.i , s.o;
}

